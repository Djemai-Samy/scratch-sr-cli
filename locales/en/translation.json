{
	"common": {
		"ask": {
			"projectName": "What the name of the project ?",
			"packageManager": "Do you want to use yarn ?",
			"installDeps": "Do you want to install dependecies ?",
			"templateName": "What type of app do you want ?",
			"options": "Choose your options:",
			"useTypescript": "Do you want to use typescript ?",
			"useDocker": "Do You want to use Docker ?",
			"useDockerCompose": "Do You want to use Docker compose ?",
			"startServer": "Do you want to start the server?",
			"proceed": "Do you want to continue?"
		},
		"info": {
			"projectName": "Name of you project: ",
			"folderGeneration": "Generating folder structure...",
			"projectPath": "Project created at: ",
			"updating": "Updating",
			"updated": "Updated",
			"usingYarn": "We are using Yarn !",
			"usingNpm": "We are using npm !",
			"installDeps": "We are going to install the dependecies !",
			"noInstallDeps": "We are not going to install the dependecies !",
			"usingTypescript": "We are using Typescript in the project !",
			"notUsingTypescript": "We are not using Typescript in the project !",
			"usingJavascript": "We are using Javascript in the project !",
			"usingDocker": "We are using Docker in the project !",
			"notUsingDocker": "We are not using Docker in the project !",
			"usingDockerCompose": "We are using Docker Compose in the project !",
			"notUsingDockerCompose": "We are not using Docker Compose in the project !",
			"dependencies": {
				"install": "Installing dependecies...",
				"installed": "Dependecies installed for"
			}
		},
		"error": {
			"nameInvalid": "This name is not correct! (The name should be in lowercase and only contain alphanumeric characters, underscores, and hyphens. It must start with a letter and cannot end with a hyphens or an underscore.)",
			"appNameExists": "A folder with this name already exists!",
			"noApp": "You need at least 1 app to continue!",
			"port": {
				"invalid": "This port is not correct! exemple: '3000', '80', '8888'..."
			}
		},
		"server": {
			"ready": "The server is running on port",
			"error": {
				"port": "This is not a valid port!",
				"portUsed": "This port is already taken by another app!"
			}
		}
	},
	"compose": {
		"commands": {
			"dev": "Build the Development Images and deploy the Development Stack with Live Reload.",
			"up": "Build the Production Images and deploy the Production Stack."
		}
	},
	"express": {
		"ask": {
			"appName": "What's the name of the ExpressJS app ?",
			"port": "Which port do you want to use for your ExpressJS app?"
		},
		"info": {},
		"commands": {
			"dev": "Launch the sever in development mode and Live Reload.",
			"build": "Build the app.",
			"start": "Start the server in pruduction mode."
		},
		"server": {},
		"readme": {
			"runServer": "Run the server"
		}
	},
	"php": {
		"ask": {
			"appName": "What's the name of the PHP app ?",
			"server": "Do you want to use PHP built-in server?",
			"port": "Which port do you want to use for your PHP server?"
		},
		"info": {
			"port": "Port for PHP server set to: ",
			"updating": "UpdatingPHP Server port configuration...",
			"updated": "PHP port configuration updated!",
			"server": "Using PHP built-in server!"
		},
		"composer": {
			"ask": {},
			"info": {
				"installing": "Installing Composer dependecies...",
				"installed": "Composer dependecies installed!",
				"dumping": "Dumping Auto Loader...",
				"dumped": "Auto Loader dumped!"
			}
		},
		"commands": {
			"dev": "Launch the sever in development mode and Live Reload.",
			"build": "Build the app.",
			"start": "Start the server in pruduction mode."
		},
		"server": {},
		"readme": {
			"runServer": "Run the server"
		}
	},
	"webpack": {
		"ask": {
			"port": "Which port do you want to use for Webpack Dev Server?"
		},
		"info": {
			"port": "Port for Webpack Dev Server set to: ",
			"updating": "Updating Webpack Dev Server port configuration...",
			"updated": "Webpack Dev Server port configuration updated!"
		}
	},
	"node": {
		"ask": {},
		"info": {
			"installing": "Installing NodeJS dependecies: ",
			"installed": "NodeJS Dependecies installed!"
		}
	},
	"react": {
		"ask": {
			"appName": "What's the name of the ReactJS app ?",
			"port": "Which port do you want to use for Webpack Dev Server?"
		},
		"info": {},
		"commands": {
			"dev": " Serve the app in development mode and Live Reload.",
			"build": "Build the app (Modifications in webpack.config.js)."
		},
		"server": {},
		"readme": {
			"runServer": "Run the server"
		}
	},
	"start": {
		"common": {
			"ask": {
				"task": "What do you want to do?",
				"services": "Which service do you want to use?"
			},
			"error": {
				"noService": "You need at least 1 service to continue!",
				"noPackageFile": "package.json file not found!",
				"noDockerDevFile": "docker-compose-dev.yaml file not found!",
				"noDockerFile": "docker-compose.yaml file not found!!"
			}
		},
		"react": {
			"info": {
				"express": "In production mode, your ReactJS app is served with ExpressJS form the public folder. Do you want to launch the build?",
				"builded": "L'application ReactJS est construite!"
			},
			"warning": {
				"nginx": "In production mode, you ReactJS app is served with Nginx. use docker instead!"
			},
			"error": {
				"server": "You dont have a service to serve your ReactJS app in production mode!"
			}
		}
	}
}
